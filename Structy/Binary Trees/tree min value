class Node {
  constructor(val) {
    this.val = val;
    this.left = null;
    this.right = null;
  }
}

// ~~~~ ITERATIVE ~~~~~ //
// const treeMinValue = (root) => {
//   let queue = [root]
//   let currMin = Infinity
//   while (queue.length > 0) {
//     let current = queue.shift()
//     console.log(current.val)
//     if (current.val < currMin) {
//       currMin = current.val
//     }
//     if (current.left) queue.push(current.left)
//     if (current.right) queue.push(current.right)
//   }
//   return currMin
// };


// ~~~~ RECURSIVE ~~~~~ //
const treeMinValue = (root) => {
  if (root === null) return Infinity
  const leftMin = treeMinValue(root.left)
  const rightMin = treeMinValue(root.right)
  return Math.min(root.val, leftMin, rightMin)
};

const a = new Node(3);
const b = new Node(11);
const c = new Node(4);
const d = new Node(4);
const e = new Node(-2);
const f = new Node(1);

a.left = b;
a.right = c;
b.left = d;
b.right = e;
c.right = f;

//       3
//    /    \
//   11     4
//  / \      \
// 4   -2     1

console.log(treeMinValue(a)); // -> -2

module.exports = {
  treeMinValue,
};
