// class Node {
//   constructor(val) {
//     this.val = val;
//     this.left = null;
//     this.right = null;
//   }
// }

// RECURSIVE - SEANS FIRST SOLVE
// const treeValueCount = (root, target) => {
//   // base case
//   if (root === null) return 0
//   let currentVal = (root.val === target) ? 1 : 0
//   let rightBranch = treeValueCount(root.right, target)
//   let leftBranch = treeValueCount(root.left, target)
//   return currentVal + rightBranch + leftBranch
// };

// ITERATIVE
const treeValueCount = (root, target) => {
  if (root === null) return 0
  let stack = [root]
  let count = 0

  while (stack.length > 0) {
    let current = stack.pop()
    if (current.val === target) count++
    if (current.left) stack.push(current.left)
    if (current.right) stack.push(current.right)
  }

  return count

};

module.exports = {
  treeValueCount,
};
